/*
* This build file was auto generated by running 'gigawatt'
* @author Giuseppe Ricupero
* @date 13-09-2016 07.46
*/
// [plugins] section {{{
plugins {
	id 'groovy'
	id 'eclipse'
	id 'build-dashboard'
	id 'project-report'
	id 'codenarc'
	id 'net.saliman.cobertura' version '2.3.2'
	id 'maven'
}
// }}}

// [general] configuration
project.ext { // {{{
	groovyVersion   = '2.4.7'
	gradleVersion   = '3.2'
	spockVersion    = '1.0-groovy-2.4'
	codenarcVersion = '0.24.1'
	slf4jVersion    = '1.7.21'
	log4jVersion    = '2.6.2'
} // }}}

project.with { // {{{
	//project.name is set in the settings.gradle with rootProject.name
	group                 'it.italiaonline.rnd.filters'
	version               '1.8.0' // (remove tail -SNAPSHOT for releases e.g., '1.0.0')
	description           'This filter "Titlelize" Italian text'
	wrapper.gradleVersion "$gradleVersion"
} // }}}

repositories { // {{{
	jcenter()

	// testing nexus server reachability
	Integer.metaClass.getSeconds = { delegate * 1000 }
	try {
		if ( new URL(nexusUrl).getText(connectTimeout: 5.seconds).contains('Sonatype Nexus') ) {
			logger.warn("Adding maven repositories, nexus <$nexusUrl>")
			maven { url "${nexusUrl}/content/repositories/snapshots" }
			maven { url "${nexusUrl}/content/repositories/releases"  }
		} else {
			logger.warn("maven repos skipped cause <$nexusUrl> is not reachable!")
		}
	} catch (IOException e) {
		def host = nexusUrl.find($/(?<=https?://)[^/]+/$)
		logger.warn("maven repos skipped cause <$host> cannot be resolved!")
	}
} // }}}


dependencies { // {{{
	// Groovy language support
	compile "org.codehaus.groovy:groovy-all:$groovyVersion"

	// Slf4j dependencies with log4j2 backend
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
	compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
	compile "org.apache.logging.log4j:log4j-core:$log4jVersion"

	// We use the awesome Spock testing and specification framework
	testCompile "org.spockframework:spock-core:$spockVersion"
} // }}}

// codenarc groovy source analyses
codenarc{
	toolVersion = "$codenarcVersion"

	codenarcMain {
		configFile = rootProject.file('config/codenarc/ruleset.groovy')
		exclude "**/package-info.*"
		ignoreFailures true       // does not block builds
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
	codenarcTest {
		configFile = rootProject.file('config/codenarc/ruleset-test.groovy')
		ignoreFailures true
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
}

// [maven] upload to http nexus configuration
configurations {
	deployerJars
}
dependencies {
	// needed to deploy on nexus via http
	deployerJars "org.apache.maven.wagon:wagon-http:2.+"
}
uploadArchives {
	repositories.mavenDeployer {
		configuration = configurations.deployerJars
		repository(url: "${nexusUrl}/content/repositories/releases") {
			authentication(userName: nexusUsername, password: nexusPassword)
		}
		snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
			authentication(userName: nexusUsername, password: nexusPassword)
		}
	}
}

// [tasks] configuration {{{
jar {
	// execute check task when create the jar
	dependsOn 'check'
}

check {
	// clean before check
	dependsOn 'clean'
	// create the code coverage report
	dependsOn 'cobertura'
	// set the correct order for the dep tasks
	tasks.findByName('cobertura').mustRunAfter 'clean'
}
// }}}

// [tasks] listJars definition {{{
task listJars {
	description = 'print out the jars used by the project'
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
} // }}}

// vim: ft=groovy:fdm=marker
