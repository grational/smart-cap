/*
* This build file was auto generated by running 'gigawatt'
* @author Giuseppe Ricupero
* @date 13-09-2016 07.46
*/
// [plugins] section {{{
plugins {
	id 'groovy'
	id 'eclipse'
	id 'build-dashboard'
	id 'project-report'
	id 'codenarc'
	id 'net.saliman.cobertura' version '2.5.4'
	// awesome git tag / gradle version integration
	id 'pl.allegro.tech.build.axion-release' version '1.9.1'
}
// }}}

// [general] configuration
project.ext { // {{{
	groovyVersion      = '2.4.7'
	gradleVersion      = '4.2.1'
	spockVersion       = '1.1-groovy-2.4'
	codenarcVersion    = '0.24.1'
	slf4jVersion       = '1.7.21'
	log4jVersion       = '2.6.2'
	commonsTextVersion = '1.1'
} // }}}

project.with { // {{{
	//project.name is set in the settings.gradle with rootProject.name
	group                 'it.italiaonline.rnd.filters'
	version               scmVersion.version // '0.5.0' (remove -SNAPSHOT for releases)
	description           'This filter "Titlelize" Italian text'
	wrapper.gradleVersion "$gradleVersion"
} // }}}

repositories { // {{{
	jcenter()
} // }}}


dependencies { // {{{
	// Groovy language support
	compile "org.codehaus.groovy:groovy-all:$groovyVersion"

	// Slf4j dependencies with log4j2 backend
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
	compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
	compile "org.apache.logging.log4j:log4j-core:$log4jVersion"

	// calculate Levenshtein distance
	compile "org.apache.commons:commons-text:$commonsTextVersion"

	// We use the awesome Spock testing and specification framework
	testCompile "org.spockframework:spock-core:$spockVersion"
} // }}}

// codenarc groovy source analyses
codenarc{
	toolVersion = "$codenarcVersion"

	codenarcMain {
		configFile = rootProject.file('config/codenarc/ruleset.groovy')
		exclude "**/package-info.*"
		ignoreFailures true       // does not block builds
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
	codenarcTest {
		configFile = rootProject.file('config/codenarc/ruleset-test.groovy')
		ignoreFailures true
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
}

// [tasks] configuration {{{
jar {
	// execute check task when create the jar
	dependsOn 'check'
}

check {
	// clean before check
	dependsOn 'clean'
	// create the code coverage report
	dependsOn 'cobertura'
	// set the correct order for the dep tasks
	tasks.findByName('cobertura').mustRunAfter 'clean'
}
// }}}

// [tasks] listJars definition {{{
task listJars {
	description = 'print out the jars used by the project'
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
} // }}}

// use parallelization for tests
tasks.withType(Test) {
	maxParallelForks = Runtime.runtime.availableProcessors() / 2
}
task uniTest(type: Test) {
	description = 'unit tests task'
	exclude '**/*ISpec*'
	exclude '**/*FSpec*'
}
task intTest(type: Test) {
	description = 'integration tests task'
	exclude '**/*USpec*'
	exclude '**/*FSpec*'
}
task funTest(type: Test) {
	description = 'functional tests task'
	exclude '**/*USpec*'
	exclude '**/*ISpec*'
}
gradle.startParameter.excludedTaskNames += "uniTest"
gradle.startParameter.excludedTaskNames += "intTest"
gradle.startParameter.excludedTaskNames += "funTest"

// vim: ft=groovy:fdm=marker
